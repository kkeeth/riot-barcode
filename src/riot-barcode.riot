<riot-barcode>
  <p>Change input characters: </p>
  <div if={ state.settings.value.length > 0 }>
    <svg name="renderElement" if={ state.settings.renderer === 'svg' }></svg>
    <canvas name="renderElement" if={ state.settings.renderer === 'canvas' }></canvas>
    <img name="renderElement" if={ state.settings.renderer === 'img' } alt="barcode" />
  </div>
  <p if={ state.settings.value.length === 0 } class="notification">
    Please enter at least one character in your text.
  </p>

  <script>
    import JsBarcode from 'jsbarcode';

    const initialProps = {
      format: "CODE128",
      renderer: "svg",
      width: 2,
      height: 100,
      displayValue: true,
      fontOptions: "",
      font: "Futura",
      textAlign: "center",
      textPosition: "bottom",
      textMargin: 5,
      fontSize: 50,
      background: "#fff",
      lineColor: "#000",
      margin: 10,
      value: "JsBarcode for RiotJS",
    };

    export default {
      state: {
        settings: initialProps
      },
      onBeforeMount(props, state) {
        Object.keys(initialProps).map(key => {
          props[key] && (state.settings[key] = props[key])
        })
      },
      onMounted() {
        this.update()
      },
      onUpdated(props, state) {
        const renderElement = this.$('[name="renderElement"]');
        try {
          new JsBarcode(renderElement, state.settings.value, Object.assign({}, state.settings));
        } catch (e) {
          // prevent stop the parent process
          console.error(e);
        }
      }
    }
  </script>

  <style>
    :host input {
      margin-bottom: 20px;
      font-size: 1.2rem;
      border-radius: 8px;
      border: 1px solid #333;
      height: 24px;
      padding: 10px;
    }
    .notification {
      font-size:  1.8rem;
      color: #ED4054;
    }
  </style>
</riot-barcode>
